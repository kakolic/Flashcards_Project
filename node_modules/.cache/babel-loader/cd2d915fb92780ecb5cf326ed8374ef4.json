{"ast":null,"code":"var _jsxFileName = \"/Users/kc/Thinkful/Project_Flashcards_Qualified_1/src/Layout/EditCard.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { readDeck, updateCard } from \"../utils/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EditCard() {\n  _s();\n\n  const history = useHistory();\n  const params = useParams();\n  const state = {\n    front: \"\",\n    back: \"\"\n  };\n  const [updatedCard, setUpdatedCard] = useState(state);\n  const [updatedDeck, setUpdatedDeck] = useState({}); // const [front, setFront] = useState(\"\")\n  // const [back, setBack] = useState(\"\")\n  // const [currentDeck, setCurrentDeck] = useState(null)\n  // const [currentCard, setCurrentCard] = useState(null)\n\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    const loadInfo = async () => {\n      const newDeck = await readDeck(params, abortController.signal);\n      setUpdatedDeck(() => newDeck);\n      setUpdatedCard({\n        id: params,\n        front: newDeck.front,\n        back: newDeck.back\n      });\n    };\n\n    loadInfo();\n    return () => abortController.abort();\n  }, [params]); // useEffect(() => {\n  //     async function loadInfo(){\n  //         try {\n  //             const response = await readDeck(params.deckId);\n  //             setCurrentDeck(response)\n  //             setCurrentCard(response.cards.find((card) => (card.id + \"\") === params.cardId))\n  //             updatedCard((response.cards.find((card) => (card.id + \"\") === params.cardId)).front)\n  //             //setBack((response.cards.find((card) => (card.id + \"\") === params.cardId)).back)\n  //         } catch (error) {console.log(error)}\n  //     }\n  //     loadInfo()\n  // }, [params])\n\n  const handleCancel = e => {\n    e.preventDefault();\n    history.push(\"/\");\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const deck = await updateCard(updatedCard);\n    history.push(`/decks/${params.deck}`);\n  };\n\n  if (updatedCard && updatedDeck) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: \"Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), \" / \", /*#__PURE__*/_jsxDEV(Link, {\n          to: `/decks/${params.deckId}`,\n          children: updatedDeck.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 48\n        }, this), \"  / Edit Card \", updatedCard.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Edit Card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Front\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          required: true,\n          value: updatedCard.front,\n          onChange: e => setUpdatedCard(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          required: true,\n          value: updatedCard.back,\n          onChange: e => setUpdatedCard(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCancel,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 12\n  }, this);\n}\n\n_s(EditCard, \"Xn9MBIwdFaPEg5s0pONN9knmEkg=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = EditCard;\nexport default EditCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditCard\");","map":{"version":3,"sources":["/Users/kc/Thinkful/Project_Flashcards_Qualified_1/src/Layout/EditCard.js"],"names":["React","useEffect","useState","Link","useHistory","useParams","readDeck","updateCard","EditCard","history","params","state","front","back","updatedCard","setUpdatedCard","updatedDeck","setUpdatedDeck","abortController","AbortController","loadInfo","newDeck","signal","id","abort","handleCancel","e","preventDefault","push","handleSubmit","deck","deckId","name","target","value"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { readDeck, updateCard } from \"../utils/api\";\n\nfunction EditCard() {\n    const history = useHistory();\n    const params = useParams();\n    const state = {front: \"\", back: \"\"}\n    const [updatedCard, setUpdatedCard]= useState(state)\n\n    const [updatedDeck, setUpdatedDeck]= useState({});\n\n    // const [front, setFront] = useState(\"\")\n    // const [back, setBack] = useState(\"\")\n    // const [currentDeck, setCurrentDeck] = useState(null)\n    // const [currentCard, setCurrentCard] = useState(null)\n\nuseEffect (()=> {\n    const abortController= new AbortController();\n    const loadInfo = async ()=> {\n        const newDeck = await readDeck(params, abortController.signal);\n        setUpdatedDeck(()=> newDeck);\n        setUpdatedCard({\n            id:params,\n            front: newDeck.front,\n            back:newDeck.back,\n        })\n    }\n    loadInfo()\n    return ()=> abortController.abort();\n}, [params])\n\n\n    // useEffect(() => {\n    //     async function loadInfo(){\n    //         try {\n    //             const response = await readDeck(params.deckId);\n    //             setCurrentDeck(response)\n    //             setCurrentCard(response.cards.find((card) => (card.id + \"\") === params.cardId))\n    //             updatedCard((response.cards.find((card) => (card.id + \"\") === params.cardId)).front)\n    //             //setBack((response.cards.find((card) => (card.id + \"\") === params.cardId)).back)\n    //         } catch (error) {console.log(error)}\n    //     }\n    //     loadInfo()\n    // }, [params])\n\n    const handleCancel = (e) => {\n        e.preventDefault();\n        history.push(\"/\")\n    }\n\n    const handleSubmit = async(e) => {\n        e.preventDefault();\n        const deck = await updateCard(updatedCard);\n            history.push(`/decks/${params.deck}`)\n        }\n   \n\n    if(updatedCard && updatedDeck){\n        return (\n            <div>\n                <div>\n                    <Link to=\"/\">Home</Link> / <Link to={`/decks/${params.deckId}`}>{updatedDeck.name}</Link>  / Edit Card {updatedCard.id}\n                </div>\n                <h2>Edit Card</h2>\n                <form onSubmit={handleSubmit}>\n                    <label>Front</label>\n                    <br />\n                    <textarea\n                    required\n                    value={updatedCard.front}\n                    onChange={(e) => setUpdatedCard(e.target.value)}\n                    />\n                    <br />\n                    <label>Back</label>\n                    <br />\n                    <textarea\n                    required\n                    value={updatedCard.back}\n                    onChange={(e) => setUpdatedCard(e.target.value)}\n                    />\n                    <br />\n                    <button onClick={handleCancel}>Cancel</button>\n                    <button type=\"submit\">Submit</button>\n                </form>\n            </div>\n        )\n    }\n    return <p>Loading...</p>\n}\nexport default EditCard;"]},"metadata":{},"sourceType":"module"}