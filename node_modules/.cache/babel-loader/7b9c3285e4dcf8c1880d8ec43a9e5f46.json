{"ast":null,"code":"var _jsxFileName = \"/Users/kc/Thinkful/Project_Flashcards_Qualified_1/src/Layout/StudyCardFlip.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction StudyCardFlip({\n  currentCards\n}) {\n  _s();\n\n  const history = useHistory();\n  const params = useParams();\n  const [cardCount, setCardCount] = useState(1);\n  const [sideOfCard, setSideOfCard] = useState(null);\n  const [studyCardCount, setStudyCardCount] = useState(0);\n  const [studyCard, setStudyCard] = useState(null);\n  const orderedCards = currentCards.sort((a, b) => a.id - b.id);\n  useEffect(() => {\n    if (currentCards.length > 2) {\n      setSideOfCard(true);\n    }\n\n    setStudyCard(orderedCards[studyCardCount]);\n  }, []);\n\n  const handleFlip = e => {\n    e.preventDefault();\n    setSideOfCard(!sideOfCard);\n  };\n\n  const handleNext = e => {\n    e.preventDefault();\n    setSideOfCard(!sideOfCard);\n    setCardCount(current => current + 1);\n    setStudyCardCount(current => current + 1);\n    setStudyCard(orderedCards[studyCardCount + 1]);\n\n    if (currentCards.length <= cardCount) {\n      if (window.confirm(\"Restart Cards?\")) {\n        setCardCount(1);\n        setStudyCardCount(0);\n        setStudyCard(orderedCards[studyCardCount]);\n        history.push(`/decks/${params.deckId}/study`);\n      } else {\n        history.push(\"/\");\n      }\n    }\n  };\n\n  const handleAddCards = e => {\n    e.preventDefault();\n    history.push(`/decks/${params.deckId}/cards/new`);\n  };\n\n  if (currentCards) {\n    if (sideOfCard === true && studyCard) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\"Card \", cardCount, \" of \", currentCards.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), studyCard.front, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleFlip,\n          children: \"Flip\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this);\n    }\n\n    if (sideOfCard === false && studyCard) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\"Card \", cardCount, \" of \", currentCards.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), studyCard.back, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleFlip,\n          children: \"Flip\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNext,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Not enough cards.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"You need at least 3 cards to study. There are \", currentCards.length, \" in this deck.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddCards,\n          children: \"+ Add Cards\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n}\n\n_s(StudyCardFlip, \"uJyW7MMC8ELL47JVwr63nDDEO9Y=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = StudyCardFlip;\nexport default StudyCardFlip;\n\nvar _c;\n\n$RefreshReg$(_c, \"StudyCardFlip\");","map":{"version":3,"sources":["/Users/kc/Thinkful/Project_Flashcards_Qualified_1/src/Layout/StudyCardFlip.js"],"names":["React","useEffect","useState","useHistory","useParams","StudyCardFlip","currentCards","history","params","cardCount","setCardCount","sideOfCard","setSideOfCard","studyCardCount","setStudyCardCount","studyCard","setStudyCard","orderedCards","sort","a","b","id","length","handleFlip","e","preventDefault","handleNext","current","window","confirm","push","deckId","handleAddCards","front","back"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\nfunction StudyCardFlip({ currentCards }) {\n    const history = useHistory();\n    const params = useParams();\n\n    const [cardCount, setCardCount] = useState(1);\n    const [sideOfCard, setSideOfCard] = useState(null);\n    const [studyCardCount, setStudyCardCount] = useState(0);\n    const [studyCard, setStudyCard] = useState(null);\n    const orderedCards = currentCards.sort((a, b) => a.id - b.id);\n\n    useEffect(() => {\n        if(currentCards.length > 2){\n            setSideOfCard(true);\n        }\n        setStudyCard(orderedCards[studyCardCount])\n    }, [])\n    \n    const handleFlip = (e) => {\n        e.preventDefault()\n        setSideOfCard(!sideOfCard)\n    }\n\n\n    const handleNext = (e) => {\n        e.preventDefault()\n        setSideOfCard(!sideOfCard)\n        setCardCount((current) => current + 1)\n        setStudyCardCount((current) => current + 1)\n        setStudyCard(orderedCards[studyCardCount + 1])\n        if(currentCards.length <= cardCount){\n            if(window.confirm(\"Restart Cards?\")){\n                setCardCount(1);\n                setStudyCardCount(0);\n                setStudyCard(orderedCards[studyCardCount]);\n                history.push(`/decks/${params.deckId}/study`)\n            } else {history.push(\"/\")}\n        }\n    }\n\n    const handleAddCards = (e) => {\n        e.preventDefault()\n        history.push(`/decks/${params.deckId}/cards/new`)\n    }\n\n    if (currentCards) {\n        if ((sideOfCard === true) && studyCard){ \n            return (\n                <div>\n                    <h5>Card {cardCount} of {currentCards.length}</h5>\n                    {studyCard.front}\n                    <br />\n                    <button onClick={handleFlip}>Flip</button>\n                </div>\n            )\n        }\n        if ((sideOfCard === false) && studyCard){\n            return (\n                <div>\n                    <h5>Card {cardCount} of {currentCards.length}</h5>\n                    {studyCard.back}\n                    <br />\n                    <button onClick={handleFlip}>Flip</button>\n                    <button onClick={handleNext}>Next</button> \n                </div>\n            )\n        }\n        else {\n            return (\n                <div>\n                    <h5>Not enough cards.</h5>\n                    <p>You need at least 3 cards to study. There are {currentCards.length} in this deck.</p>\n                    <button onClick={handleAddCards}>+ Add Cards</button>\n                </div>\n            )\n        }\n    }\n    return (\n        <p>Loading...</p>\n    )\n}\nexport default StudyCardFlip;"]},"metadata":{},"sourceType":"module"}