{"ast":null,"code":"var _jsxFileName = \"/Users/kc/Thinkful/Project_Flashcards_Qualified_1/src/Layout/CardForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Link, useHistory, useRouteMatch } from \"react-router-dom\";\nimport { updateCard, createCard, readCard } from \"../../../utils/api/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CardForm({\n  deck,\n  setDeck,\n  decks,\n  setDecks,\n  deckUrl\n}) {\n  _s();\n\n  const history = useHistory();\n  const {\n    url\n  } = useRouteMatch();\n  const [formData, setFormData] = useState({\n    front: \"\",\n    back: \"\"\n  });\n  const [edit, setEdit] = useState(false);\n  const tempDeck = deck;\n  let tempDecks = decks; //tracking whether this form is to be used in EditCard or AddCard\n\n  const urlComponents = url.split('/');\n  useEffect(() => {\n    if (urlComponents[urlComponents.length - 1] === \"edit\") {\n      setEdit(true);\n      const abortController = new AbortController();\n\n      const readingTheCard = async () => {\n        try {\n          const response = await readCard(urlComponents[urlComponents.length - 2], abortController.signal);\n          setFormData(response);\n        } catch (error) {\n          throw error;\n        }\n      };\n\n      readingTheCard();\n      return () => abortController.abort();\n    }\n  }, []);\n\n  const handleChange = ({\n    target\n  }) => {\n    setFormData(() => ({ ...formData,\n      [target.name]: target.value\n    }));\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const abortController = new AbortController();\n    let itemsToSubmit = [deck.id, formData, abortController.signal];\n    let operativeFunction = createCard;\n\n    if (edit) {\n      itemsToSubmit = [deck.id, formData, abortController.signal];\n      operativeFunction = updateCard;\n    }\n\n    const handlingTheSubmit = async () => {\n      try {\n        const response = await operativeFunction(...itemsToSubmit); //replaces the card that was operated on from the temp deck with the post-op version\n\n        tempDeck.cards = tempDeck.cards.filter(card => card.id !== response.id);\n        tempDeck.cards.push(response);\n        setDeck({ ...tempDeck\n        }); //replaces the old version of the deck in the decks array with the new version\n\n        tempDecks = tempDecks.filter(aDeck => aDeck.id !== deck.id);\n        tempDecks.push(tempDeck);\n        setDecks([...tempDecks]);\n        if (!edit) setFormData({\n          front: \"\",\n          back: \"\"\n        });else history.push(deckUrl);\n      } catch (error) {\n        if (error === \"AbortError\") console.log(\"aborted handlingTheSubmit\");else throw error;\n      }\n    };\n\n    handlingTheSubmit();\n    return () => abortController.abort();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    name: \"createDeck\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"front\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"front\",\n        children: \"Front\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"front\",\n        type: \"text\",\n        name: \"front\",\n        value: formData.front,\n        placeholder: \"Front side of card\",\n        className: \"form-control\",\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"back\",\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"back\",\n        type: \"text\",\n        name: \"back\",\n        value: formData.back,\n        placeholder: \"Back Side of card\",\n        className: \"form-control\",\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      className: \"btn btn-secondary mr-1\",\n      to: deckUrl,\n      children: \"Done\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-primary\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CardForm, \"yVbOcPuXeeb9Z1fQH8t2iS5DYRQ=\", false, function () {\n  return [useHistory, useRouteMatch];\n});\n\n_c = CardForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardForm\");","map":{"version":3,"sources":["/Users/kc/Thinkful/Project_Flashcards_Qualified_1/src/Layout/CardForm.js"],"names":["React","useState","useEffect","Link","useHistory","useRouteMatch","updateCard","createCard","readCard","CardForm","deck","setDeck","decks","setDecks","deckUrl","history","url","formData","setFormData","front","back","edit","setEdit","tempDeck","tempDecks","urlComponents","split","length","abortController","AbortController","readingTheCard","response","signal","error","abort","handleChange","target","name","value","handleSubmit","event","preventDefault","itemsToSubmit","id","operativeFunction","handlingTheSubmit","cards","filter","card","push","aDeck","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,IAAR,EAAcC,UAAd,EAA0BC,aAA1B,QAA8C,kBAA9C;AACA,SAAQC,UAAR,EAAoBC,UAApB,EAAgCC,QAAhC,QAA+C,0BAA/C;;AAEA,eAAe,SAASC,QAAT,CAAkB;AAC7BC,EAAAA,IAD6B;AAE7BC,EAAAA,OAF6B;AAG7BC,EAAAA,KAH6B;AAI7BC,EAAAA,QAJ6B;AAK7BC,EAAAA;AAL6B,CAAlB,EAMb;AAAA;;AACE,QAAMC,OAAO,GAAGX,UAAU,EAA1B;AACA,QAAM;AAACY,IAAAA;AAAD,MAAQX,aAAa,EAA3B;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CACpC;AAACkB,IAAAA,KAAK,EAAC,EAAP;AAAWC,IAAAA,IAAI,EAAC;AAAhB,GADoC,CAAxC;AAGA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBrB,QAAQ,CAAC,KAAD,CAAhC;AAEA,QAAMsB,QAAQ,GAAGb,IAAjB;AACA,MAAIc,SAAS,GAAGZ,KAAhB,CATF,CAWE;;AACA,QAAMa,aAAa,GAAGT,GAAG,CAACU,KAAJ,CAAU,GAAV,CAAtB;AACAxB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGuB,aAAa,CAACA,aAAa,CAACE,MAAd,GAAuB,CAAxB,CAAb,KAA4C,MAA/C,EAAsD;AAClDL,MAAAA,OAAO,CAAC,IAAD,CAAP;AACA,YAAMM,eAAe,GAAG,IAAIC,eAAJ,EAAxB;;AACA,YAAMC,cAAc,GAAG,YAAY;AAC/B,YAAI;AACA,gBAAMC,QAAQ,GAAG,MAAMvB,QAAQ,CAACiB,aAAa,CAACA,aAAa,CAACE,MAAd,GAAuB,CAAxB,CAAd,EAA0CC,eAAe,CAACI,MAA1D,CAA/B;AACAd,UAAAA,WAAW,CAACa,QAAD,CAAX;AACH,SAHD,CAGE,OAAME,KAAN,EAAa;AAAC,gBAAMA,KAAN;AAAY;AAC/B,OALD;;AAMAH,MAAAA,cAAc;AACd,aAAO,MAAMF,eAAe,CAACM,KAAhB,EAAb;AACH;AACJ,GAbQ,EAaN,EAbM,CAAT;;AAeA,QAAMC,YAAY,GAAG,CAAC;AAACC,IAAAA;AAAD,GAAD,KAAc;AAC/BlB,IAAAA,WAAW,CAAC,OAAO,EACf,GAAGD,QADY;AAEf,OAACmB,MAAM,CAACC,IAAR,GAAcD,MAAM,CAACE;AAFN,KAAP,CAAD,CAAX;AAIH,GALD;;AAOA,QAAMC,YAAY,GAAIC,KAAD,IAAW;AAC5BA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMb,eAAe,GAAG,IAAIC,eAAJ,EAAxB;AACA,QAAIa,aAAa,GAAG,CAAChC,IAAI,CAACiC,EAAN,EAAU1B,QAAV,EAAoBW,eAAe,CAACI,MAApC,CAApB;AACA,QAAIY,iBAAiB,GAAGrC,UAAxB;;AACA,QAAGc,IAAH,EAAQ;AACJqB,MAAAA,aAAa,GAAG,CAAChC,IAAI,CAACiC,EAAN,EAAU1B,QAAV,EAAoBW,eAAe,CAACI,MAApC,CAAhB;AACAY,MAAAA,iBAAiB,GAAGtC,UAApB;AACH;;AACD,UAAMuC,iBAAiB,GAAG,YAAY;AAClC,UAAI;AACA,cAAMd,QAAQ,GAAG,MAAMa,iBAAiB,CAAC,GAAGF,aAAJ,CAAxC,CADA,CAGA;;AACAnB,QAAAA,QAAQ,CAACuB,KAAT,GAAiBvB,QAAQ,CAACuB,KAAT,CAAeC,MAAf,CAAuBC,IAAD,IAAUA,IAAI,CAACL,EAAL,KAAYZ,QAAQ,CAACY,EAArD,CAAjB;AACApB,QAAAA,QAAQ,CAACuB,KAAT,CAAeG,IAAf,CAAoBlB,QAApB;AACApB,QAAAA,OAAO,CAAC,EAAC,GAAGY;AAAJ,SAAD,CAAP,CANA,CAQA;;AACAC,QAAAA,SAAS,GAAGA,SAAS,CAACuB,MAAV,CAAkBG,KAAD,IAAWA,KAAK,CAACP,EAAN,KAAajC,IAAI,CAACiC,EAA9C,CAAZ;AACAnB,QAAAA,SAAS,CAACyB,IAAV,CAAe1B,QAAf;AACAV,QAAAA,QAAQ,CAAC,CAAC,GAAGW,SAAJ,CAAD,CAAR;AAEA,YAAG,CAACH,IAAJ,EAAUH,WAAW,CAAC;AAACC,UAAAA,KAAK,EAAC,EAAP;AAAWC,UAAAA,IAAI,EAAC;AAAhB,SAAD,CAAX,CAAV,KACKL,OAAO,CAACkC,IAAR,CAAanC,OAAb;AACR,OAfD,CAeE,OAAOmB,KAAP,EAAc;AACZ,YAAGA,KAAK,KAAK,YAAb,EAA2BkB,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAA3B,KACK,MAAMnB,KAAN;AACR;AACJ,KApBD;;AAqBAY,IAAAA,iBAAiB;AACjB,WAAO,MAAMjB,eAAe,CAACM,KAAhB,EAAb;AACH,GAhCD;;AAkCA,sBACI;AAAM,IAAA,IAAI,EAAC,YAAX;AAAwB,IAAA,QAAQ,EAAEK,YAAlC;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,EAAE,EAAC,OADL;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,IAAI,EAAC,OAHP;AAIE,QAAA,KAAK,EAAEtB,QAAQ,CAACE,KAJlB;AAKE,QAAA,WAAW,EAAC,oBALd;AAME,QAAA,SAAS,EAAC,cANZ;AAOE,QAAA,QAAQ,EAAEgB;AAPZ;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAaE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,EAAE,EAAC,MADL;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,KAAK,EAAElB,QAAQ,CAACG,IAJlB;AAKE,QAAA,WAAW,EAAC,mBALd;AAME,QAAA,SAAS,EAAC,cANZ;AAOE,QAAA,QAAQ,EAAEe;AAPZ;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAbF,eAyBE,QAAC,IAAD;AAAM,MAAA,SAAS,EAAC,wBAAhB;AAAyC,MAAA,EAAE,EAAErB,OAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAzBF,eA4BE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,EAAC,iBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA5BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmCH;;GA9GuBL,Q;UAOJL,U,EACFC,a;;;KARMI,Q","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport {Link, useHistory, useRouteMatch} from \"react-router-dom\";\nimport {updateCard, createCard, readCard} from \"../../../utils/api/index\";\n\nexport default function CardForm({\n    deck,\n    setDeck,\n    decks,\n    setDecks,\n    deckUrl\n}){\n    const history = useHistory();\n    const {url} = useRouteMatch();\n    const [formData, setFormData] = useState(\n        {front:\"\", back:\"\"}\n    )\n    const [edit, setEdit] = useState(false);\n\n    const tempDeck = deck;\n    let tempDecks = decks;\n\n    //tracking whether this form is to be used in EditCard or AddCard\n    const urlComponents = url.split('/');\n    useEffect(() => {\n        if(urlComponents[urlComponents.length - 1] === \"edit\"){\n            setEdit(true);\n            const abortController = new AbortController();\n            const readingTheCard = async () => {\n                try {\n                    const response = await readCard(urlComponents[urlComponents.length - 2], abortController.signal);\n                    setFormData(response);\n                } catch(error) {throw error}\n            }\n            readingTheCard();\n            return () => abortController.abort();\n        }\n    }, []);\n\n    const handleChange = ({target}) => {\n        setFormData(() => ({\n            ...formData,\n            [target.name]:target.value\n        }))\n    };\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const abortController = new AbortController();\n        let itemsToSubmit = [deck.id, formData, abortController.signal];\n        let operativeFunction = createCard;\n        if(edit){\n            itemsToSubmit = [deck.id, formData, abortController.signal];\n            operativeFunction = updateCard;\n        }\n        const handlingTheSubmit = async () => {\n            try {\n                const response = await operativeFunction(...itemsToSubmit);\n\n                //replaces the card that was operated on from the temp deck with the post-op version\n                tempDeck.cards = tempDeck.cards.filter((card) => card.id !== response.id);\n                tempDeck.cards.push(response);\n                setDeck({...tempDeck})\n                \n                //replaces the old version of the deck in the decks array with the new version\n                tempDecks = tempDecks.filter((aDeck) => aDeck.id !== deck.id);\n                tempDecks.push(tempDeck);\n                setDecks([...tempDecks]);\n\n                if(!edit) setFormData({front:\"\", back:\"\"});\n                else history.push(deckUrl);\n            } catch (error) {\n                if(error === \"AbortError\") console.log(\"aborted handlingTheSubmit\");\n                else throw error;\n            }\n        }\n        handlingTheSubmit();\n        return () => abortController.abort();\n    }\n\n    return (\n        <form name=\"createDeck\" onSubmit={handleSubmit}>\n          <div className=\"front\">\n            <label htmlFor=\"front\">Front</label>\n            <textarea\n              id=\"front\"\n              type=\"text\"\n              name=\"front\"\n              value={formData.front}\n              placeholder=\"Front side of card\"\n              className=\"form-control\"\n              onChange={handleChange}\n            ></textarea>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"back\">Back</label>\n            <textarea\n              id=\"back\"\n              type=\"text\"\n              name=\"back\"\n              value={formData.back}\n              placeholder=\"Back Side of card\"\n              className=\"form-control\"\n              onChange={handleChange}\n            ></textarea>\n          </div>\n          <Link className=\"btn btn-secondary mr-1\" to={deckUrl}>\n            Done\n          </Link>\n          <button type=\"submit\" className=\"btn btn-primary\">\n            Submit\n          </button>\n        </form>\n      );\n\n}"]},"metadata":{},"sourceType":"module"}